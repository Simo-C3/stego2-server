// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package provider

import (
	"context"
	"github.com/Simo-C3/stego2-server/internal/handler"
	"github.com/Simo-C3/stego2-server/internal/infra"
	"github.com/Simo-C3/stego2-server/internal/router"
	"github.com/Simo-C3/stego2-server/internal/usecase"
	"github.com/Simo-C3/stego2-server/pkg/config"
	"github.com/Simo-C3/stego2-server/pkg/database"
	"github.com/Simo-C3/stego2-server/pkg/middleware"
	"github.com/Simo-C3/stego2-server/pkg/redis"
	"github.com/labstack/echo/v4"
)

// Injectors from wire.go:

func New(contextContext context.Context) (*echo.Echo, error) {
	redisConfig := config.NewRedisConfig()
	client, err := redis.New(redisConfig)
	if err != nil {
		return nil, err
	}
	publisher := infra.NewPublisher(client)
	debugHandler := handler.NewDebugHandler(publisher)
	subscriber := infra.NewSubscriber(client)
	gameRepository := infra.NewGameRepository(client)
	dbConfig := config.NewDBConfig()
	db, err := database.New(dbConfig)
	if err != nil {
		return nil, err
	}
	problemRepository := infra.NewProblemRepository(db)
	msgSender := infra.NewMsgSender()
	gameManager := usecase.NewGameManager(publisher, subscriber, gameRepository, problemRepository, msgSender)
	wsHandler := handler.NewWSHandler(gameManager, msgSender)
	roomRepository := infra.NewRoomRepository(db)
	otpRepository := infra.NewOTPRepository(client)
	roomHandler := handler.NewRoomHandler(wsHandler, roomRepository, otpRepository, gameRepository)
	firebaseConfig := config.NewFirebaseConfig()
	authController := middleware.NewAuthController(contextContext, firebaseConfig)
	otpHandler := handler.NewOTPHandler(otpRepository, authController)
	echoEcho := router.New(debugHandler, roomHandler, otpHandler, authController)
	return echoEcho, nil
}
